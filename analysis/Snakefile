from config import folder_reports
from config import fname_pkl_clinic
from config import fname_pkl_olink
from config import fname_pkl_val_clinic
from config import fname_pkl_prodoc_olink
from config import fname_pkl_prodoc_clinic
from config import fname_pkl_cirkaflow_clinic
from config import fname_pkl_cirkaflow_olink
from config import TARGETS
import config as project_config

print(folder_reports)

configfile: 'config/workflow/prodoc_vs_cirkaflow.yaml'

print(config)

DATA_FOLDER = Path(project_config.data)
DATA_PROCESSED = Path(project_config.data_processed)
FOLDER_REPORTS = Path(project_config.folder_reports)

rule all:
    input: 
        expand(
            ["{out_path}/{cohort}/{target}/1_explorative_analysis.ipynb",
             #"{out_path}/{target}/2_tree.ipynb",
             "{out_path}/prodoc/{target}/clinic_train_val_comparison.html",
             "{out_path}/{cohort}/{target}/1_PC1_vs_PC2.pdf",
             "{out_path}/{cohort}/{target}/1_differential_analysis.xlsx",
             "{out_path}/{cohort}/clinic_data_profil.html",
             "{out_path}/{cohort}/olink_data_profil.html",
             ],
            out_path=folder_reports,
            target=TARGETS,
            cohort=['prodoc', 'cirkaflow']),
        expand(
            "{out_path}/prodoc/{target}/{feat_sets}/3_log_reg.ipynb",
            out_path=folder_reports,
            target=TARGETS,
            feat_sets=project_config.feat_sets),
        f"{folder_reports}/data_prodoc/train_val"f"/1_explorative_analysis.ipynb"



nb="0_load_data_olink_validation.ipynb"
rule validation_data:
    input:
        olink='Validation Results/ProDoc_Olink_bridged_QC.tsv',
        metadata='Validation Results/metadata.tsv',
        id_map='Validation Results/id.xlsx'
    output:
        olink_prodoc_val='olink_prodoc_val.xlsx',
        olink_cflow='olink_cflow.xlsx',
        nb=f"{folder_reports}/data_circaflow/{nb}",
    shell:
        "papermill {input.nb} {output.nb}"
        " --inject-paths"
        " && jupyter nbconvert {output.nb} --to html"


nb='0_load_data_prodoc.ipynb'
rule prepare_data_prodoc:
    input:
        nb=nb,
        olink_prodoc_val='olink_prodoc_val.xlsx',
        DATA_CLINIC=DATA_FOLDER / 'DataSheet - fewer variables_2022-11-24.xlsx',
        DATA_OLINK=DATA_FOLDER / 'QC_OlinkProD_wide.tsv',
        DATA_OLINK_VAL=DATA_FOLDER / 'olink_prodoc_val.xlsx'
    output:
        lifelines="S:/SUND-CBMR-RegH-cohorts/ProDoc/reports/data_prodoc/lifelines.pdf",
        death_vs_alive_diagonose_dates="S:/SUND-CBMR-RegH-cohorts/ProDoc/reports/data_prodoc/death_vs_alive_diagonose_dates",
        timing_deaths_over_time="S:/SUND-CBMR-RegH-cohorts/ProDoc/reports/data_prodoc/timing_deaths_over_time.pdf",
        died_before_admission="S:/SUND-CBMR-RegH-cohorts/ProDoc/reports/data_prodoc/died_before_adm.xlsx",
        km_plot_death="S:/SUND-CBMR-RegH-cohorts/ProDoc/reports/data_prodoc/km_plot_death.pdf",
        deaths_along_time="S:/SUND-CBMR-RegH-cohorts/ProDoc/reports/data_prodoc/deaths_along_time.pdf",
        km_plot_admission="S:/SUND-CBMR-RegH-cohorts/ProDoc/reports/data_prodoc/km_plot_admission.pdf",
        targets="S:/SUND-CBMR-RegH-cohorts/ProDoc/data/processed/targets.pkl",
        clinic_pkl_train=fname_pkl_clinic, 
        olink=fname_pkl_olink,
        val_clinic=fname_pkl_val_clinic,
        fname_pkl_prodoc_clinic_num=project_config.fname_pkl_prodoc_clinic_num,
        prodoc_olink_all=fname_pkl_prodoc_olink,
        nb=f"{folder_reports}/data_prodoc/{nb}",
    shell:
        "papermill {input.nb} {output.nb}"
        " --inject-paths"
        " && jupyter nbconvert {output.nb} --to html"


nb='0_load_data_cirkaflow.ipynb'
rule prepare_data_cirkaflow:
    input:
        nb=nb,
        DATA_CLINIC = DATA_FOLDER / 'CleanData, CirKaFlow.true.xlsx',
        DATA_OLINK = DATA_FOLDER / 'olink_cflow.pkl',
        DATA_KEYS = DATA_FOLDER / "Validation Results" / "boks_placement_randomized.csv",
        DATA_KEYS_UPDATE = DATA_FOLDER /  "Validation Results" / 'cflow_id_update.xlsx',
        DATA_DUPLICATES = DATA_FOLDER /  "Validation Results" / 'duplicates.xlsx'
    output:       
        clinic=project_config.fname_pkl_cirkaflow_clinic,
        olink=project_config.fname_pkl_cirkaflow_olink,
        clinic_num=project_config.fname_pkl_cirkaflow_clinic_num,
        nb=f"{folder_reports}/{nb}",
    shell:
        "papermill {input.nb} {output.nb}"
        " --inject-paths"
        " && jupyter nbconvert {output.nb} --to html"


nb='0_training_data_all.ipynb'
rule combine_all_data:
    input:
        project_config.fname_pkl_prodoc_clinic_num,
        project_config.fname_pkl_cirkaflow_clinic_num,
        project_config.fname_pkl_prodoc_olink,
        project_config.fname_pkl_cirkaflow_olink,
        nb=nb
    output:
        project_config.fname_pkl_all_olink,
        project_config.fname_pkl_all_clinic_num,
        nb=f"{folder_reports}/{nb}",
    shell:
        "papermill {input.nb} {output.nb}"
        " --inject-paths"
        " && jupyter nbconvert {output.nb} --to html"


##########################################################################################
### Differential analysis and data profiling

data_cohort = {'cirkaflow': dict(olink=fname_pkl_cirkaflow_olink,
                            clinic=fname_pkl_cirkaflow_clinic),
          'prodoc': dict(olink=fname_pkl_prodoc_olink,
                        clinic=fname_pkl_prodoc_clinic)}

rule profile_data:
    input:
        olink=lambda w: data_cohort[w.cohort]['olink'], 
        clinic=lambda w: data_cohort[w.cohort]['clinic'],
    output:
        profiling_report_clinic="{out_path}/{cohort}/clinic_data_profil.html",
        profiling_report_olink="{out_path}/{cohort}/olink_data_profil.html",
    shell:
        "pandas_profiling {input.clinic}  {output.profiling_report_clinic} -m"
        " && pandas_profiling {input.olink}  {output.profiling_report_olink} -m"


nb='1_explorative_analysis.ipynb'
rule differential_analysis:
    input:
        olink=lambda w: data_cohort[w.cohort]['olink'], 
        clinic=lambda w: data_cohort[w.cohort]['clinic'],
        nb=nb
    output:
        nb="{out_path}/{cohort}/{target}"f"/{nb}",
        pca="{out_path}/{cohort}/{target}/1_PC1_vs_PC2.pdf",
        table="{out_path}/{cohort}/{target}/1_differential_analysis.xlsx",
    params:
        folder="{out_path}/{cohort}/{target}"
    shell:
        "papermill {input.nb} {output.nb}"
        " --inject-paths"
        " -r CLINIC {input.clinic}"
        " -r OLINK {input.olink}"
        " -r TARGET {wildcards.target}"
        " -r FOLDER {params.folder}"
        " && jupyter nbconvert {output.nb} --to html"



_cont_vars_w_target=','.join(project_config.clinic_data.vars_cont + TARGETS)
rule differential_analysis_cohort:
    input:
        olink=project_config.fname_pkl_prodoc_olink,
        clinic=project_config.fname_pkl_prodoc_clinic,
        nb=nb
    output:
        nb=f"{folder_reports}/data_prodoc/train_val"f"/{nb}"
    shell:
        "papermill {input.nb} {output.nb}"
        " --inject-paths"
        " -r CLINIC {input.clinic}"
        " -r OLINK {input.olink}"
        f" -r TARGET {project_config.COMPARE_PRODOC}"
        f" -r clinic_cont {_cont_vars_w_target}"
        " && jupyter nbconvert {output.nb} --to html"

##########################################################################################
### Model Training

nb="4_compare_splits.ipynb"
rule compare_train_val:
    input:
        train=fname_pkl_clinic, # needs update
        val=fname_pkl_val_clinic,
        nb=nb
    output:
        sweetviz_report_splits_clinic="{out_path}/prodoc/{target}/clinic_train_val_comparison.html",
        nb="{out_path}/prodoc/{target}"f"/{nb}"
    params:
        folder="{out_path}/prodoc/{target}/"
    shell:
        "papermill {input.nb} {output.nb}"
        " -r fname_pkl_train {input.train}"
        " -r fname_pkl_val {input.val}"
        " -r TARGET {wildcards.target}"
        " -r FOLDER {params.folder}"
        " -r name_report clinic_train_val_comparison"


nb='2_tree.ipynb'
rule decision_tree:
    input:
        CLINIC=fname_pkl_olink,
        OLINK=fname_pkl_clinic,
        nb=nb
    output:
        nb="{out_path}/{target}"f"/{nb}"
    shell:
        "papermill {input.nb} {output.nb}"
        " --inject-paths"
        " -r TARGET {wildcards.target}"
        " && jupyter nbconvert {output.nb} --to html"

nb='3_log_reg.ipynb'
rule log_reg:
    input:
        CLINIC=project_config.fname_pkl_all_clinic_num,
        OLINK=project_config.fname_pkl_all_olink,
        nb=nb
    output:
        nb="{out_path}/prodoc/{target}/{feat_sets}"f"/{nb}"
    params:
        folder="{out_path}/prodoc/{target}/{feat_sets}"
    shell:
        "papermill {input.nb} {output.nb}"
        " --inject-paths"
        " -r TARGET {wildcards.target}"
        " -r CLINIC {input.CLINIC}"
        " -r OLINK {input.OLINK}"
        " -r feat_set_to_consider {wildcards.feat_sets}"
        " -r VAL_IDS_query Cflow"
        " -r FOLDER {params.folder}"
        " && jupyter nbconvert {output.nb} --to html"

