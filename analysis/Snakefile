from config import folder_reports
from config import fname_pkl_clinic
from config import fname_pkl_olink
from config import fname_pkl_val_clinic
from config import fname_pkl_prodoc_olink
from config import fname_pkl_prodoc_clinic
from config import fname_pkl_cirkaflow_clinic
from config import fname_pkl_cirkaflow_olink
from config import TARGETS
import config as project_config

print(folder_reports)

configfile: 'config/workflow/prodoc_vs_cirkaflow.yaml'

print(config)

DATA_FOLDER = Path(project_config.data)
DATA_PROCESSED = Path(project_config.data_processed)
FOLDER_REPORTS = Path(project_config.folder_reports)

rule all:
    input: 
        expand(
            ["{out_path}/{cohort}/{target}/1_explorative_analysis.ipynb",
            #  "{out_path}/{target}/2_tree.ipynb",
             "{out_path}/prodoc/{target}/clinic_train_val_comparison.html",],
            out_path=folder_reports,
            target=TARGETS,
            cohort=['prodoc', 'cirkaflow']),
        expand(
            "{out_path}/prodoc/{target}/{feat_sets}/3_log_reg.ipynb",
            out_path=folder_reports,
            target=TARGETS,
            feat_sets=project_config.feat_sets),
        f"{folder_reports}/prodoc_train_val"f"/1_explorative_analysis.ipynb",
        profiling_report_clinic=f"{folder_reports}/clinic_data_profil.html",
        profiling_report_olink=f"{folder_reports}/olink_data_profil.html"



nb="0_load_data_olink_validation.ipynb"
rule validation_data:
    input:
        olink='Validation Results/ProDoc_Olink_bridged_QC.tsv',
        metadata='Validation Results/metadata.tsv',
        id_map='Validation Results/id.xlsx'
    output:
        olink_prodoc_val='olink_prodoc_val.xlsx',
        olink_cflow='olink_cflow.xlsx',
        nb=f"{folder_reports}/{nb}",
    shell:
        "papermill {input.nb} {output.nb}"
        " --inject-paths"
        " && jupyter nbconvert {output.nb} --to html"


nb='0_load_data_prodoc.ipynb'
rule prepare_data:
    input:
        nb=nb,
        olink_prodoc_val='olink_prodoc_val.xlsx',
        DATA_CLINIC=DATA_FOLDER / 'DataSheet - fewer variables_2022-11-24.xlsx',
        DATA_OLINK = DATA_FOLDER / 'QC_OlinkProD_wide.tsv',
        DATA_OLINK_VAL = DATA_FOLDER / 'olink_prodoc_val.xlsx'
    output:
        clinic_pkl_train=fname_pkl_clinic, 
        olink_pkl_train=fname_pkl_olink,
        clinic_pkl_val=fname_pkl_val_clinic,
        clinic_pkl_olink_all=fname_pkl_prodoc_olink,
        clinic_pkl_clinic_all_num=project_config.fname_pkl_prodoc_clinic_num,
        nb=f"{folder_reports}/{nb}",
    shell:
        "papermill {input.nb} {output.nb}"
        " --inject-paths"
        " && jupyter nbconvert {output.nb} --to html"



rule profile_data:
    input:
        clinic_pkl_train=fname_pkl_clinic, 
        olink_pkl_train=fname_pkl_olink,
    output:
        profiling_report_clinic=f"{folder_reports}/clinic_data_profil.html",
        profiling_report_olink=f"{folder_reports}/olink_data_profil.html",
    shell:
        "pandas_profiling {input.clinic_pkl_train}  {output.profiling_report_clinic} -m"
        " && pandas_profiling {input.olink_pkl_train}  {output.profiling_report_olink} -m"

nb="4_compare_splits.ipynb"
rule compare_train_val:
    input:
        train=fname_pkl_clinic,
        val=fname_pkl_val_clinic,
        nb=nb
    output:
        sweetviz_report_splits_clinic="{out_path}/{target}/clinic_train_val_comparison.html",
        nb="{out_path}/{target}"f"/{nb}"
    shell:
        "papermill {input.nb} {output.nb}"
        " -r fname_pkl_train {input.train}"
        " -r fname_pkl_val {input.val}"
        " -r TARGET {wildcards.target}"
        " -r name_report clinic_train_val_comparison"


data_cohort = {'cirkaflow': dict(olink=fname_pkl_cirkaflow_olink,
                            clinic=fname_pkl_cirkaflow_clinic),
          'prodoc': dict(olink=fname_pkl_prodoc_olink,
                        clinic=fname_pkl_prodoc_clinic)}

nb='1_explorative_analysis.ipynb'
rule differential_analysis:
    input:
        olink=lambda w: data_cohort[w.cohort]['olink'], #fname_pkl_olink,
        clinic=lambda w: data_cohort[w.cohort]['clinic'], #fname_pkl_clinic,
        nb=nb
    output:
        nb="{out_path}/{cohort}/{target}"f"/{nb}"
    shell:
        "papermill {input.nb} {output.nb}"
        " --inject-paths"
        " -r CLINIC {input.clinic}"
        " -r OLINK {input.olink}"
        " -r TARGET {wildcards.target}"
        " && jupyter nbconvert {output.nb} --to html"

_cont_vars_w_target=','.join(project_config.clinic_data.vars_cont + TARGETS)
rule differential_analysis_cohort:
    input:
        olink=project_config.fname_pkl_prodoc_olink,
        clinic=project_config.fname_pkl_prodoc_clinic,
        nb=nb
    output:
        nb=f"{folder_reports}/prodoc_train_val"f"/{nb}"
    shell:
        "papermill {input.nb} {output.nb}"
        " --inject-paths"
        " -r CLINIC {input.clinic}"
        " -r OLINK {input.olink}"
        f" -r TARGET {project_config.COMPARE_PRODOC}"
        f" -r clinic_cont {_cont_vars_w_target}"
        f" -r "
        " && jupyter nbconvert {output.nb} --to html"

nb='2_tree.ipynb'
rule decision_tree:
    input:
        CLINIC=fname_pkl_olink,
        OLINK=fname_pkl_clinic,
        nb=nb
    output:
        nb="{out_path}/{target}"f"/{nb}"
    shell:
        "papermill {input.nb} {output.nb}"
        " --inject-paths"
        " -r TARGET {wildcards.target}"
        " && jupyter nbconvert {output.nb} --to html"

nb='3_log_reg.ipynb'
rule log_reg:
    input:
        CLINIC=project_config.fname_pkl_all_clinic_num,
        OLINK=project_config.fname_pkl_all_olink,
        nb=nb
    output:
        nb="{out_path}/prodoc/{target}/{feat_sets}"f"/{nb}"
    params:
        folder="{out_path}/prodoc/{target}/{feat_sets}"
    shell:
        "papermill {input.nb} {output.nb}"
        " --inject-paths"
        " -r TARGET {wildcards.target}"
        " -r CLINIC {input.CLINIC}"
        " -r OLINK {input.OLINK}"
        " -r feat_set_to_consider {wildcards.feat_sets}"
        " -r VAL_IDS_query Cflow"
        " -r FOLDER {params.folder}"
        # use_val_split = True
        # FOLDER = ''
        " && jupyter nbconvert {output.nb} --to html"

